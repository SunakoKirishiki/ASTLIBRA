#pragma once
#include "windows.h"
#include "iostream"

#define QWORD unsigned __int64
#define 模块大小 0x86AFFF
const char ConfigFile[] = "hack.ini";
//特征码
const BYTE sigExp[] = { 0x41,0x83,0xF9,0x43,0x74,0x26,0x83,0xF9,0x43,0x74,0x21,0x83,0xFA,0x43,0x74,0x1C,0x41,0x83,0xF8,0x43,0x74,0x16,0x41,0x83,0xFA,0x43,0x74,0x10,0x41,0x83,0xFB,0x43,0x74,0x0A,0x83,0xFB,0x43,0x74,0x05,0x83,0xFF,0x43,0x75,0x0F };
const BYTE sigGold[] = { 0x0F,0x28,0xF2,0x0F,0x29,0x7C,0x24,0x20,0x0F,0x28,0xF9 };
const BYTE sigSpar[] = { 0x66,0x0F,0x6E,0xC3,0x0F,0x5B,0xC0,0xF3,0x41,0x0F,0x59,0xC4,0xF3,0x0F,0x2C,0xD8 };
const BYTE sigEExp[] = { 0x41,0x83,0xF9,0x45,0x74,0x26,0x83,0xF9,0x45,0x74,0x21,0x83,0xFA,0x45,0x74,0x1C,0x41,0x83,0xF8,0x45 };
const BYTE sigChestP[] = { 0xF3,0x41,0x0F,0x2C,0xD2,0x45,0x8B,0xC5,0xF3,0x41,0x0F,0x2C,0xC9,0x83,0xEA,0x17,0x83,0xE9,0x12 };
const BYTE sigChestType[] = { 0xB3,0x01,0xEB,0x06,0x83,0xF8,0x46,0x0F,0x9F,0xC3 };
const BYTE sigStrengthen_1[] = { 0x41,0x8B,0xD9,0x49,0x8B,0xC3,0x41,0x80,0xFA,0x05,0x7D,0x10 };
const BYTE sigStrengthen_2[] = { 0x41,0xB8,0x97,0x00,0x00,0x00,0xC7,0x44,0x24,0x40,0xFF,0x00,0x00,0x00 };
const BYTE sigMaterial[] = { 0x41,0x2B,0xC5,0xB9,0x05,0x00,0x00,0x00,0x66,0x0F,0x6E,0xD0,0x0F,0x5B,0xD2 };
const BYTE sigLove[] = { 0x48,0xBA,0x01,0x00,0x40,0x00,0x00,0x10,0x00,0x00,0x48,0x0F,0xA3,0xC2 }; //mov rdx, 0x100000400001 bt rdx, rax
const BYTE sigBoard_1[] = { 0x83,0xFE,0x46,0x74,0x1D,0x41,0x83,0xFF,0x46 }; //cmp esi, 0x46
const BYTE sigBoard_2[] = { 0x41,0x83,0xFF,0x64,0xB8,0x04,0x00,0x00,0x00,0x0F,0x46,0xE8,0x8B,0xCD };
const BYTE sigAdvancedBoard[] = { 0x44,0x8B,0xD8,0x4B,0x8D,0x3C,0x5B,0x48,0xC1,0xFF,0x20,0x83,0xC7,0x0D,0x85,0xFF };//mov r11d, eax lea rdi, ds:[r11+r11*2]


enum HookType
{
	Gold,
	Spar,
	Exp,
	EExp,
	Strengthen,
	ChestProbability,
	ChestType,
	NewChest,
	Material,
	Love,
	Board,
	AdvancedBoard,
	Favorability

};

union Base
{
	QWORD   address;
	BYTE    data[8];
	struct DATA
	{
		DWORD	hData;
		DWORD	lData;		
	}stData;
	
	
};
Base SearchSignature  //返回目标内存地址中的值QWORD类型
(HANDLE process,     //目标窗口句柄
	QWORD qwBaseAddr,   //主模块基地址
	QWORD qwSize,		//主模块大小
	LPBYTE Signature,	//特征数组
	DWORD dwSize,		//特征数组大小
	DWORD dwDistance,	//特征数组距离目标距离
	bool bFlag,			//目标在特征值上面填0，否则填1
	bool bAddressOrData);//是要找地址0还是数据1

void OutputDebugInformation(const char* pszFormat, ...);
